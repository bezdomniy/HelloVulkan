#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 800
#define HEIGHT 600
#define WORKGROUP_SIZE 32

#define EPSILON 0.0001
#define MAXLEN 1000.0

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel{
  vec4 value;
};

layout(std140, binding = 0) buffer buf
{
   Pixel imageData[];
};

struct Camera 
{
  mat4 inverseTransform;
  float pixelSize;
  float halfWidth;
  float halfHeight;
};

struct Material {
    vec3 colour;
//     float ambient;
//     float diffuse;
//     float specular;
//     float shininess;
//     float reflective;
//     float transparency;
//     float refractiveIndex;

// //        std::shared_ptr<Pattern> pattern;
//     bool shadow = true;
};

struct Shape {
  mat4 inverseTransform;
  Material material;
  int typeEnum;
  int id;
};

layout (binding = 1) uniform UBO 
{
	vec4 lightPos;
	Camera camera;
} ubo;

layout (std140, binding = 2) buffer Shapes
{
	Shape shapes[ ];
};

void rayForPixel(in vec2 p, out vec4 rayO, out vec4 rayD) {
  float xOffset = (p.x + 0.5) * ubo.camera.pixelSize;
  float yOffset = (p.y + 0.5) * ubo.camera.pixelSize;

  float worldX = ubo.camera.halfWidth - xOffset;
  float worldY = ubo.camera.halfHeight - yOffset;

  vec4 pixel = ubo.camera.inverseTransform *
                     vec4(worldX, worldY, -1.0, 1.0);
  rayO = ubo.camera.inverseTransform * vec4(0.0, 0.0, 0.0, 1.0);
  rayD = normalize(pixel - rayO);
}

void transformRay(in mat4 m, in vec4 rayO, in vec4 rayD, out vec4 nRayO, out vec4 nRayD) {
  nRayO = m * rayO;
  nRayD = m * rayD;
}

float sphereIntersect(in vec4 rayO, in vec4 rayD) {
  vec4 sphereToRay = rayO - vec4(0.0, 0.0, 0.0, 1.0);
  float a = dot(rayD, rayD);
  float b = 2 * dot(rayD, sphereToRay);
  float c =
      dot(sphereToRay, sphereToRay) - 1;
  float discriminant = b * b - 4 * a * c;

  if (discriminant < 0)
    return -1.0;

  float t1 = (-b - sqrt(discriminant)) / (2 * a);
  float t2 = (-b + sqrt(discriminant)) / (2 * a);

  if (t1 < t2) {
    return t1;
  }
  return t2;

  // intersections.push_back(Geometry::Intersection<Shape>{t1, this});
  // intersections.push_back(Geometry::Intersection<Shape>{t2, this});
}

int intersect(in vec4 rayO, in vec4 rayD, inout float resT)
{
	int id = -1;

	for (int i = 0; i < shapes.length(); i++)
	{
    vec4 nRayO, nRayD;
    transformRay(shapes[i].inverseTransform, rayO, rayD, nRayO, nRayD);
    
    float t = -1.0;
    if (shapes[i].typeEnum == 0) {
      t = sphereIntersect(nRayO, nRayD);
    }
    // else if (shapes[i].typeEnum == 1) {
    //   float t = planeIntersect(rayO, rayD);
    // }
		
		if ((t > EPSILON) && (t < resT))
		{
			id = shapes[i].id;
			resT = t;
		}
	}	
	
	return id;
}

// Lighting =========================================================



// float lightDiffuse(vec3 normal, vec3 lightDir) 
// {
// 	return clamp(dot(normal, lightDir), 0.1, 1.0);
// }

// float lightSpecular(vec3 normal, vec3 lightDir, float specularFactor)
// {
// 	vec3 viewVec = normalize(ubo.camera.pos);
// 	vec3 halfVec = normalize(lightDir + viewVec);
// 	return pow(clamp(dot(normal, halfVec), 0.0, 1.0), specularFactor);
// }

// vec3 normalAt(in vec3 rayO, in vec3 rayD, in int i) {
//   vec3 n;
//   if (shapes[i].typeEnum == 0) {
//     n = sphereNormal(rayO, rayD, shapes[i]);
//   }
//   else if (shapes[i].typeEnum == 1) {
//     n = planeNormal(rayO, rayD, shapes[i]);
//   }
//   return n;
// }

vec3 renderScene(inout vec4 rayO, inout vec4 rayD, inout int id)
{
	vec3 color = vec3(0.0);
	float t = MAXLEN;

	// Get intersected object ID
	int objectID = intersect(rayO, rayD, t);
	
	if (objectID == -1)
	{
		return color;
	}
	
	// vec4 pos = rayO + t * rayD;
	// vec4 lightVec = normalize(ubo.lightPos - pos);				
	// vec3 normal;

	for (int i = 0; i < shapes.length(); i++)
	{
		if (objectID == shapes[i].id)
		{
      // normal = normalAt();

			// normal = shapes[i].normal;
			// float diffuse = lightDiffuse(normal, lightVec);
			// float specular = lightSpecular(normal, lightVec, shapes[i].specular);
			// color = diffuse * shapes[i].material.colour + specular;	

      color = shapes[i].material.colour;
		}
	}

	if (id == -1)
		return color;

	// id = objectID;

	// Shadows
	// t = length(ubo.lightPos - pos);
	// color *= calcShadow(pos, lightVec, id, t);
	
	// // Fog
	// color = fog(t, color);	
	
	// // Reflect ray for next render pass
	// reflectRay(rayD, normal);
	// rayO = pos;	
	
	return color;
}


void main() {

  /*
  In order to fit the work into workgroups, some unnecessary threads are launched.
  We terminate those threads here. 
  */
  if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    return;

  vec4 rayO, rayD;

  rayForPixel(gl_GlobalInvocationID.xy, rayO, rayD);
		
	// Basic color path
	int id = 0;
	vec4 color = vec4(renderScene(rayO, rayD, id),1.0);
  
  // vec4 color = vec4(1.0,0.0,0.0,1.0);
          
  // store the rendered mandelbrot set into a storage buffer:
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = color;
}
